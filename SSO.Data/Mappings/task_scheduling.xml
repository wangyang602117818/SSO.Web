<?xml version="1.0" encoding="utf-8" ?>
<sql>
  <insert>
    INSERT INTO TaskScheduling (
    [Name],
    [Status]
    <isNotEmpty property="Description" prepend=",">
      [Description]
    </isNotEmpty>
    <isNotEmpty property="Api" prepend=",">
      [Api]
    </isNotEmpty>
    <isNotEmpty property="NextRunTime" prepend=",">
      [NextRunTime]
    </isNotEmpty>
    <isNotEmpty property="LastRunTime" prepend=",">
      [LastRunTime]
    </isNotEmpty>
    <isNotEmpty property="LastRunResult" prepend=",">
      [LastRunResult]
    </isNotEmpty>
    <isNotEmpty property="CreateTime" prepend=",">
      [CreateTime]
    </isNotEmpty>
    ) VALUES (
    @Name,
    @Status
    <isNotEmpty property="Description" prepend=",">
      @Description
    </isNotEmpty>
    <isNotEmpty property="Api" prepend=",">
      @Api
    </isNotEmpty>
    <isNotEmpty property="NextRunTime" prepend=",">
      @NextRunTime
    </isNotEmpty>
    <isNotEmpty property="LastRunTime" prepend=",">
      @LastRunTime
    </isNotEmpty>
    <isNotEmpty property="LastRunResult" prepend=",">
      @LastRunResult
    </isNotEmpty>
    <isNotEmpty property="CreateTime" prepend=",">
      @CreateTime
    </isNotEmpty>
    )
  </insert>
  <update>
    update TaskScheduling set [UpdateTime]=GETDATE()
    <isNotEmpty property="Name" prepend=",">
      [Name]=@Name
    </isNotEmpty>
    <isNotEmpty property="Status" prepend=",">
      [Status]=@Status
    </isNotEmpty>
    <isNotEmpty property="Description" prepend=",">
      [Description]=@Description
    </isNotEmpty>
    <isNotEmpty property="Api" prepend=",">
      [Api]=@Api
    </isNotEmpty>
    <isNotEmpty property="NextRunTime" prepend=",">
      [NextRunTime]=@NextRunTime
    </isNotEmpty>
    <isNotEmpty property="LastRunTime" prepend=",">
      [LastRunTime]=@LastRunTime
    </isNotEmpty>
    <isNotEmpty property="LastRunResult" prepend=",">
      [LastRunResult]=@LastRunResult
    </isNotEmpty>
    where Id=@Id
  </update>
  <delete-mapping>
    delete from [TaskSchedulingTriggerMapping] where SchedulingId in
    <iterate property="SchedulingIds" conjunction="," open="(" close=")">
      @SchedulingIds[index]
    </iterate>
  </delete-mapping>
  <insert-mapping>
    insert into [TaskSchedulingTriggerMapping]([SchedulingId],[TriggerId])values
    <iterate conjunction="," property="triggerIds">(@schedulingId,@triggerIds[index])</iterate>
  </insert-mapping>
  <get-task-scheduling-trigger>
    select * from [dbo].[TaskScheduling] where Enable=1
    <isNotEmpty property="status" prepend="and">
      [status] = @status
    </isNotEmpty>
  </get-task-scheduling-trigger>
  <get-page-list>
    select * from(
    select *,row_number() over(order by Id desc) uid,
    (
    select count(1) from [TaskScheduling] where 1=1
    <isNotEmpty property="Description" prepend="and">
      Description like '%'+@Description+'%' or Name like '%'+@Description+'%'
    </isNotEmpty>
    )
    total from [TaskScheduling] where 1=1
    <isNotEmpty property="Description" prepend="and">
      Description like '%'+@Description+'%' or Name like '%'+@Description+'%'
    </isNotEmpty>
    ) as tbl
    where uid between (@PageIndex-1)*@PageSize+1 and @PageIndex*@PageSize
  </get-page-list>
  <get-by-name>
    select * from TaskScheduling where Name = @Name
  </get-by-name>
  <delete>
    delete from [TaskScheduling] where Id in
    <iterate property="Ids" conjunction="," open="(" close=")">
      @Ids[index]
    </iterate>
  </delete>
  <get-by-id>
    select *,TriggerId=(select TriggerId from [dbo].[TaskSchedulingTriggerMapping] where SchedulingId=tsd.Id) from  [dbo].[TaskScheduling] tsd where tsd.Id = @id
  </get-by-id>
  <enable-scheduling>
    update TaskScheduling set [Enable]=@enable,[UpdateTime]=GETDATE()
    <isEquals property="enable" value="false" prepend=",">
      [Status]=-1
    </isEquals>
    where Id = @id
  </enable-scheduling>
  <check-scheduling-running>
    select count(*) from TaskScheduling where Status=0 and id in
    <iterate property="ids" conjunction="," open="(" close=")">
      @ids[index]
    </iterate>
  </check-scheduling-running>
  <get-distinct-names>
    select distinct Id,[Name] from [dbo].[TaskScheduling]
  </get-distinct-names>
</sql>