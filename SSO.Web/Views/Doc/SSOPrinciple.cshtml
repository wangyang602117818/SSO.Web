
@{
    ViewBag.Title = "SSO实现原理";
    Layout = "~/Views/Doc/_LayoutPage.cshtml";
}
<h4 class="bd-title mb-3" id="content">SSO实现原理</h4>
<p class="fw-bold">1. SSO登录原理</p>
<p class="fw-normal">- 当用户第一次访问 A站点,因为没有token,系统会重定向到 SSO站点</p>
<p class="fw-normal">- 在 SSO站点认证成功之后随即在SSO站点设置cookie并跳回A站点,并且在url上带上ticket(这个ticket过期时间15秒,可以设置)</p>
<p class="fw-normal">- A站点拿到ticket,解析出里面的用户id,然后用该id去SSO站点获取JWTToken 然后把该token设置成A站点的cookie,之后A站点的每次请求都在header中带上该token(Authorization:token),或者在请求中带上cookie都能通过验证,至此A站点完成登录</p>
<p class="fw-normal">- 当用户第一次访问 B站点,因为没有token,系统会重定向到 SSO站点,因为之前在 SSO站点设置了cookie,这次重定向到SSO站点带上了SSO站点的cookie,SSO站点判定用户登录过,不需要用户再次认证,直接跳到B站点并且在url上带上ticket</p>
<p class="fw-normal">- 当用户第一次访问 B站点,因为没有token,系统会重定向到 SSO站点,因为之前在 SSO站点设置了cookie,这次重定向到SSO站点带上了SSO站点的cookie,SSO站点判定用户登录过,不需要用户再次认证,直接跳到B站点并且在url上带上ticket</p>
<p class="fw-normal">SSO登录过程如下图:</p>
<p class="col pe-0">
    <img src="~/Content/images/sso-login.png" style="width:90%"/>
</p>
<p class="fw-bold">2. SSO退出原理</p>
<p class="fw-normal">用户每次登录成功之后,都会在SSO站点留下登录成功的站点地址(A站点,B站点),当用户退出的时候,先重定向到SSO站点,SSO站点先清除自身的cookie,重定向到A站点,A站点收到退出请求,清除自身的cookie,A站点发出重定向到B站点的请求,B站点收到退出请求,清除自身的cookie; 全部清除完毕,跳到sso站点的登录界面,完成SSO退出</p>
<p class="fw-normal">SSO退出过程如下图:</p>
<p class="col pe-0">
    <img src="~/Content/images/sso-logout.png" style="width:90%"/>
</p>