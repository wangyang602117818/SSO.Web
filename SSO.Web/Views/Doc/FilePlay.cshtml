
@{
    ViewBag.Title = "转换和视频播放";
    Layout = "~/Views/Doc/_LayoutPage.cshtml";
}
<h4 class="bd-title mb-3" id="content">转换和视频播放</h4>
<p class="fw-normal">在 文件管理系统->配置管理->来源 中预先配置好视频的转换规则</p>
<p class="fw-normal">从不同的来源传入的视频就会按照相应的规则来转换,转换完成之后才能访问子视频</p>
<p class="fw-normal">视频的播放采用的是 http live streaming 技术, 包含视频 清单文件 和 切片文件 两部分</p>
<p class="fw-bold">1. 获取文件转换状态</p>
<p class="fw-normal">请参考文件操作的 获取文件状态 接口</p>
<p class="fw-bold">2. 通过文件Id,子文件id获取视频播放清单和切片文件</p>
<p class="fw-light">Asp.net</p>
<pre data-language="C#">
<code class="language-cs">
    public class HomeController : Controller
    {
        string fileServiceUrl = AppSettings.GetValue("fileServiceUrl");  //从配置文件获取服务器的基本地址
        /// &lt;summary>
        /// 自适应流的视频清单文件,该方法可以根据网络情况智能切换播放流
        ///&lt;/summary>
        /// &lt;param name="id">源文件id&lt;/param>
        /// &lt;param name="filename">源文件名称+".m3u"&lt;/param>
        /// &lt;returns>&lt;/returns>
        [Route("home/M3u8MultiStream/{id}/{filename}")]
        public ActionResult M3u8MultiStream(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization());
            var result = fileClientService.M3u8MultiStream(id,filename);
            return File(result.FileStream, result.ContentType);
        }
        /// &lt;summary>
        /// 获取指定流的视频清单文件
        ///&lt;/summary>
        /// &lt;param name="id">源文件id&lt;/param>
        /// &lt;param name="filename">子文件id+".m3u8"&lt;/param>
        /// &lt;returns>&lt;/returns>
        [Route("home/M3u8/{id}/{filename}")]
        public ActionResult M3u8(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization());
            var result = fileClientService.M3u8(id, filename);
            return File(result.FileStream, result.ContentType);
        }
        /// &lt;summary>
        /// 获取视频切片文件
        ///&lt;/summary>
        /// &lt;param name="id">源文件id&lt;/param>
        /// &lt;param name="filename">切片文件id+".ts"&lt;/param>
        /// &lt;returns>&lt;/returns>
        [Route("home/Ts/{id}/{filename}")]
        public ActionResult Ts(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization());
            var result = fileClientService.M3u8(id, filename);
            return File(result.FileStream, result.ContentType);
        }
    }
    </code>
 </pre>
<p class="fw-light">Asp.net Core</p>
<pre data-language="C#">
<code class="language-cs">
    public class HomeController : Controller
    {
        string fileServiceUrl = AppSettings.GetValue("fileServiceUrl");  //从配置文件获取服务器的基本地址
        /// &lt;summary>
        /// 自适应流的视频清单文件,该方法可以根据网络情况智能切换播放流
        ///&lt;/summary>
        /// &lt;param name="id">源文件id&lt;/param>
        /// &lt;param name="filename">源文件名称+".m3u"&lt;/param>
        /// &lt;returns>&lt;/returns>
        [Route("[controller]/[action]/{id}/{filename}")]
        public ActionResult M3u8MultiStream(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization(HttpContext));
            var result = fileClientService.M3u8MultiStream(id,filename);
            return File(result.FileStream, result.ContentType);
        }
        /// &lt;summary>
        /// 获取指定流的视频清单文件
        ///&lt;/summary>
        /// &lt;param name="id">源文件id&lt;/param>
        /// &lt;param name="filename">子文件id+".m3u8"&lt;/param>
        /// &lt;returns>&lt;/returns>
        [Route("[controller]/[action]/{id}/{filename}")]
        public ActionResult M3u8(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization(HttpContext));
            var result = fileClientService.M3u8(id, filename);
            return File(result.FileStream, result.ContentType);
        }
        /// &lt;summary>
        /// 获取视频切片文件
        ///&lt;/summary>
        /// &lt;param name="id">源文件id&lt;/param>
        /// &lt;param name="filename">切片文件id+".ts"&lt;/param>
        /// &lt;returns>&lt;/returns>
        [Route("[controller]/[action]/{id}/{filename}")]
        public ActionResult Ts(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization(HttpContext));
            var result = fileClientService.M3u8(id, filename);
            return File(result.FileStream, result.ContentType);
        }
    }
    </code>
 </pre>
<p class="fw-light">Java SpringBoot</p>
<pre data-language="Java">
    <code class="language-java">
        @@Controller
        @@RequestMapping("/home")
        public class HomeController {
            @@ResponseBody
            @@GetMapping(value = "/M3u8MultiStream/{id}/{filename}")
            public void M3u8MultiStream(HttpServletRequest request, HttpServletResponse response, @@PathVariable String id, @@PathVariable String filename) throws Exception {
                FileClientService fileClientService = new FileClientService(JwtManager.GetAuthorization(request));
                fileClientService.DownloadM3u8MultiStream(response, id, filename);
            }
            @@ResponseBody
            @@GetMapping(value = "/m3u8/{id}/{filename}")
            public void M3u8(HttpServletRequest request, HttpServletResponse response, @@PathVariable String id, @@PathVariable String filename)throws Exception {
                FileClientService fileClientService = new FileClientService(JwtManager.GetAuthorization(request));
                fileClientService.DownloadM3u8(response, id, filename);
            }
            @@ResponseBody
            @@GetMapping(value = "/ts/{id}/{filename}")
            public void Ts(HttpServletRequest request, HttpServletResponse response, @@PathVariable String id, @@PathVariable String filename) throws Exception {
                FileClientService fileClientService = new FileClientService(JwtManager.GetAuthorization(request));
                fileClientService.DownloadTs(response, id, filename);	
            }
        }
    </code>
 </pre>
<p class="fw-bold">3. 播放方式</p>
<p class="fw-normal">1) 引入 <a href="http://file.ssoutil.cn/js/hlsplayer.min.js" target="_blank">hlsplayer.min.js</a></p>
<p class="fw-normal">2) 添加video标签的hlsplayer样式</p>
<p class="fw-normal">3) 等页面加载完成之后调用 hlsplayer() 方法</p>
<pre data-language="Html">
<code class="language-markup">
        &lt;!DOCTYPE html>
        &lt;html>
        &lt;head>
            <mark>&lt;script src="http://file.ssoutil.cn/js/hlsplayer.min.js">&lt;/script></mark>
        &lt;/head>
        &lt;body>
           &lt;!--播放自适应流-->
           &lt;video controls width="400" height="400" <mark>class="hlsplayer"</mark>>
               &lt;source src="/home/M3u8MultiStream/{id}/{filename}.m3u" />
           &lt;/video>
           &lt;!--播放指定流-->
            &lt;video controls width="400" height="400" <mark>class="hlsplayer"</mark>>
               &lt;source src="/home/m3u8/{id}/{subid}.m3u8" />
           &lt;/video>
        &lt;/body>
        &lt;/html>
        &lt;script>
           <mark>hlsplayer()</mark>
        &lt;/script>
    </code>
</pre>
<p class="fw-normal">以上src的解释:</p>
<p class="fw-normal">{id}: 源文件id (文件操作 -> 获取文件列表 的 Id 字段)</p>
<p class="fw-normal">{filename}: 没有后缀名的文件名 (文件操作 -> 获取文件列表 的 FileName 字段)</p>
<p class="fw-normal">{subid}: 子视频文件id (文件操作 -> 获取文件列表 的 Videos.Id 字段)</p>
<p class="fw-bold">4. 记录视频播放进度</p>
<p class="fw-normal">默认情况下,视频播放中每隔2s中会发送一次请求到 M3u8MultiStream 或者 M3u8 接口,与其他请求不同的是,该请求的header中会带上time值,该值就是视频当前播放到的位置,在接口中处理该值来记录视频播放时间</p>
<p class="fw-light">修改 M3u8MultiStream 和 M3u8 接口,这样视频播放就具备了记录播放进度功能</p>
<p class="fw-light">Asp.net</p>
<pre data-language="C#">
    <code class="language-cs">
        [Route("home/M3u8MultiStream/{id}/{filename}")]
        public ActionResult M3u8MultiStream(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization());
            <mark>int time = int.Parse(Request.Headers["time"] ?? "0");</mark>
            var result = fileClientService.M3u8MultiStream(id, filename, time);
            return File(result.FileStream, result.ContentType);
        }
        [Route("home/M3u8/{id}/{filename}")]
        public ActionResult M3u8(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization());
            <mark>int time = int.Parse(Request.Headers["time"] ?? "0");</mark>
            var result = fileClientService.M3u8(id, filename, time);
            return File(result.FileStream, result.ContentType);
        }
    </code>
 </pre>
<p class="fw-light">Asp.net Core</p>
<pre data-language="C#">
    <code class="language-cs">
        [Route("[controller]/[action]/{id}/{filename}")]
        public ActionResult M3u8MultiStream(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization());
            <mark>int time = int.Parse(Request.Headers["time"].Count > 0 ? Request.Headers["time"].ToString() : "0");</mark>
            var result = fileClientService.M3u8MultiStream(id, filename, time);
            return File(result.FileStream, result.ContentType);
        }
        [Route("[controller]/[action]/{id}/{filename}")]
        public ActionResult M3u8(string id, string filename)
        {
            FileClientService fileClientService = new FileClientService(fileServiceUrl, JwtManager.GetAuthorization());
            <mark>int time = int.Parse(Request.Headers["time"].Count > 0 ? Request.Headers["time"].ToString() : "0");</mark>
            var result = fileClientService.M3u8(id, filename, time);
            return File(result.FileStream, result.ContentType);
        }
    </code>
 </pre>
<p class="fw-light">Java SpringBoot</p>
<pre data-language="Java">
<code class="language-java">
    @@ResponseBody
    @@GetMapping(value = "/M3u8MultiStream/{id}/{filename}")
    public void M3u8MultiStream(HttpServletRequest request, HttpServletResponse response, @@PathVariable String id, @@PathVariable String filename) throws Exception {
        FileClientService fileClientService = new FileClientService(JwtManager.GetAuthorization(request));
        <mark>int time = Integer.parseInt(request.getHeader("time") == null ? "0" : request.getHeader("time"));</mark>
        fileClientService.DownloadM3u8MultiStream(response, id, filename, time);
    }

    @@ResponseBody
    @@GetMapping(value = "/m3u8/{id}/{filename}")
    public void M3u8(HttpServletRequest request, HttpServletResponse response, @@PathVariable String id, @@PathVariable String filename) throws Exception {
        FileClientService fileClientService = new FileClientService(JwtManager.GetAuthorization(request));
        <mark>int time = Integer.parseInt(request.getHeader("time") == null ? "0" : request.getHeader("time"));</mark>
        fileClientService.DownloadM3u8(response, id, filename, time);
    }
    </code>
 </pre>
<p class="fw-light">效果预览</p>
<p class="col pe-0">
    <img src="~/Content/images/play.gif" />
</p>