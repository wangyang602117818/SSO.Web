@using SSO.Util.Client
@{
    ViewBag.Title = "配置单点登录-AspNet WebForm";
    Layout = "~/Views/Doc/_LayoutPage.cshtml";
}
<h4 class="bd-title mb-3" id="content">配置单点登录(Asp.Net WebForm)</h4>
<p class="fw-bold">1. 创建新项目</p>
<div class="row">
    <div class="col-4 p-2" style="background-color: #f5f5f5">
        <p class="fw-normal">1) 使用VisualStudio创建 Asp.Net Web应用程序(.Net Framework)</p>
        <p class="fw-normal">2) 添加Nuget包引用(SSO.Util.Client)</p>
        <p class="fw-normal">3) 确保项目可以编译成功,并且可以预览站点</p>
    </div>
    <div class="col">
        <img src="~/Content/images/netwebpage-1.png" style="width:100%" />
    </div>
</div>
<p class="fw-bold mt-4">2. 配置项目</p>
<p class="fw-normal">1) 在 web.config 中配置以下节点</p>
<p class="fw-light">系统默认是惰性的,添加完配置节点之后要使其生效请看节点2</p>
<pre class="line-numbers" data-language="Html">
<code class="language-markup">
        &lt;add key="ssoBaseUrl" value="@AppSettings.GetApplicationUrl(Request)" />  &lt;!--ssosso地址,用于 跳转 和 验证role权限-->
        &lt;add key="ssoSecretKey" value="tvO3zPS9Fdc4EvF867Vjbc8ox0kRaH5DCihwOzYMbLQ=" />     &lt;!--jwt token的解密秘钥-->
        &lt;add key="ssoCookieKey" value="a.web.auth" />  &lt;!--cookie保存的名称-->
        &lt;add key="ssoCookieTime" value="session" />  &lt;!--cookie保存的时间(分钟)-->
    </code>
</pre>
<p class="fw-normal">2) 在 Page_PreLoad 方法中使用 SSOAuthorize 类的 Authorize 方法来验证</p>
<pre class="line-numbers" data-language="C#">
<code class="language-cs">
        protected void Page_PreLoad(object sender,EventArgs e)
        {
            new SSOAuthorize().Authorize();
        }
    </code>
</pre>
<p class="col pe-0">
    <img src="~/Content/images/netwebpage-2.gif" />
</p>
<p class="fw-normal">3) 验证失败不跳转</p>
<p class="fw-light">现实情况中API项目往往不需要跳转到登录界面,只需返回验证失败即可,该种情况请使用 SSOAuthorize 类的构造函数的unAuthorizedRedirect属性</p>
<p class="fw-light">把 new SSOAuthorize().Authorize(); 改成 new SSOAuthorize("",false).Authorize();</p>
<p class="fw-bold mt-4">3. 登录成功之后</p>
<p class="fw-normal">可以在Page_Load中获取用户基本信息</p>
<p class="fw-normal">可以在调试工具中查看cookie的键和值,键是a.web.auth,值是jwt token,过期时间和session同步</p>
<div class="row">
    <div class="col" style="background-color: #f5f5f5">
        <pre class="line-numbers" data-language="C#">
        <code class="language-cs">
                protected void Page_Load(object sender, EventArgs e)
                {
                    ////获取用户id
                    var userId = User.Identity.Name;
                    //获取authorization(jwt token)
                    var authorization = JwtManager.GetAuthorization();
                    //访问用户基本信息
                    var userData = JwtManager.GetUserData();
                }
            </code>
     </pre>
    </div>
</div>
<p class="fw-bold mt-4">4. SSO退出</p>
<p class="fw-normal">1) 在当前项目的Global.asax文件中添加 Application_AuthenticateRequest 方法</p>
<div class="row">
    <div class="col" style="background-color: #f5f5f5">
        <pre class="line-numbers" data-language="C#">
        <code class="language-cs">
                protected void Application_AuthenticateRequest()
                {
                    new SSOAuthorize().CheckIfLogOut();
                }
            </code>
     </pre>
    </div>
</div>
<p class="fw-normal">2) 在当前项目中放入以下链接或者用js的方式跳到该链接</p>
<pre class="line-numbers" data-language="Html">
<code class="language-markup">
        &lt;!--{baseUrl}为当前项目的基本地址-->
        &lt;a href="@AppSettings.GetApplicationUrl(Request)sso/logout?returnUrl={baseUrl}">sso退出&lt;/a>
    </code>
</pre>
<p class="fw-bold mt-4">5. 通过 userId 或者 authorization 获取系统的其他信息</p>
<pre class="line-numbers" data-language="C#">
<code class="language-cs">
        //获取基本地址ssoBaseUrl(AppSettings是用于获取配置节点的对象,.net framework和.netcore通用)
        string ssoBaseUrl = AppSettings.GetValue("ssoBaseUrl");
        //初始化SSOClientService类(请在Action中初始化)
        SSOClientService clientService = new SSOClientService(ssoBaseUrl, authorization);
    </code>
</pre>
<p class="fw-normal">1. 获取所有公司列表</p>
<pre class="line-numbers" data-language="C#">
<code class="language-cs">
        var list = clientService.GetAllCompany();
    </code>
</pre>
<p class="fw-normal">2. 获取部门列表</p>
<pre class="line-numbers" data-language="C#">
<code class="language-cs">
        //companyCode:公司列表中的公司code
        var list = clientService.GetAllDepartment(companyCode);
    </code>
</pre>
<p class="fw-normal">3. 获取用户列表</p>
<pre class="line-numbers" data-language="C#">
<code class="language-cs">
        //companyCode:公司列表中的公司code
        //filter:搜索关键词(搜索UserName)
        //pageIndex:第几页
        //pageSize:每页几个
        var list = clientService.GetUserList(companyCode,filter,pageIndex,pageSize);
    </code>
</pre>
<p class="fw-normal">4. 获取角色列表</p>
<pre class="line-numbers" data-language="C#">
<code class="language-cs">
        //filter:搜索关键词(搜索Name)
        //pageIndex:第几页
        //pageSize:每页几个
        var list = clientService.GetRoleList(filter,pageIndex,pageSize);
    </code>
</pre>
<p class="fw-normal">5. 获取用户详情</p>
<pre class="line-numbers" data-language="C#">
<code class="language-cs">
        //userId:用户id
        var detail = clientService.GetUserDetail(userId);
    </code>
</pre>
<p class="fw-normal">6. 获取当前用户的权限项列表</p>
<pre class="line-numbers" data-language="C#">
<code class="language-cs">
        var permissions = clientService.GetUserPermissions();
    </code>
</pre>