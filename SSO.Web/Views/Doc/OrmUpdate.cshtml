
@{
    ViewBag.Title = "数据修改";
    Layout = "~/Views/Doc/_LayoutPage.cshtml";
}
<h4 class="bd-title mb-3" id="content">数据修改</h4>
<p class="fw-normal">isNotEmpty 节点表示Code !="" 并且 Code != null 时才生成语句块 where Code = @@Code</p>
<p class="fw-normal">更多节点请参考 动态sql 部分</p>
<p class="fw-light">company.xml</p>
<pre data-language="xml">
<code class="language-xml">
...
&lt;update>
    UPDATE Company SET
    Code = @@Code,
    Name= @@Name,
    UpdateTime= @@UpdateTime,
    [Order]= @@Order
    &lt;isNotEmpty property="Description" prepend=",">
        Description=@@Description
    &lt;/isNotEmpty>
    WHERE Id = @@Id
&lt;/update>
    </code>
</pre>
<p class="fw-light">Company.cs -- 默认Company继承了父类 EntityBase 的 Update 方法</p>
<pre data-language="C#">
<code class="language-cs">
        public class Company: ModelBase
        {
            ...
            //Company默认已经具备了Update方法
        }
    </code>
 </pre>
<p class="fw-light">修改数据</p>
<pre data-language="C#">
<code class="language-cs">
var company = new Company()
{
    Id = 11,
    Code = "com05",
    Name = "comName05",
    Description = "Description0005",
    UpdateTime = DateTime.Now,
    Order = 1
};
var count = company.Update(company);  //受影响的行数
    </code>
 </pre>