
@{
    ViewBag.Title = "数据新增";
    Layout = "~/Views/Doc/_LayoutPage.cshtml";
}
<h4 class="bd-title mb-3" id="content">数据新增</h4>
<p class="fw-bold">1. 单个数据新增</p>
<p class="fw-normal">isNotNull 节点表示 Order != null 时才生成语句块 [Order] 和 @@Order</p>
<p class="fw-normal">isNotEmpty 节点表示Code !="" 并且 Code != null 时才生成语句块 where Code = @@Code</p>
<p class="fw-normal">更多节点请参考 动态sql 部分</p>
<p class="fw-light">company.xml</p>
<pre data-language="xml">
<code class="language-xml">
...
&lt;insert>
	INSERT INTO Company (
	Code,
	Name,
	CreateTime
	&lt;isNotNull property="Order" prepend=",">
		[Order]
	&lt;/isNotNull>
	&lt;isNotEmpty property="Description" prepend=",">
		Description
	&lt;/isNotEmpty>
	) VALUES (
	@@Code,
	@@Name,
	@@CreateTime
	&lt;isNotNull property="Order" prepend=",">
		@@Order
	&lt;/isNotNull>
	&lt;isNotEmpty property="Description" prepend=",">
		@@Description
	&lt;/isNotEmpty>
	)
&lt;/insert>
    </code>
</pre>
<p class="fw-light">Company.cs -- 默认Company继承了父类 EntityBase 的 Insert 方法和 InsertIdentity 方法</p>
<pre data-language="C#">
<code class="language-cs">
        public class Company: ModelBase
        {
            ...
            //Company默认已经具备了Insert方法
        }
    </code>
 </pre>
<p class="fw-light">插入数据</p>
<pre data-language="C#">
<code class="language-cs">
var company = new Company()
	{
		Code = "com03",
		Name = "comName03",
		Description = "Description0001",
		CreateTime = DateTime.Now,
		Order=1
	};
var count = new Company().Insert(company);  //受影响的行数
    </code>
 </pre>
<p class="fw-bold">2. 批量数据新增</p>
